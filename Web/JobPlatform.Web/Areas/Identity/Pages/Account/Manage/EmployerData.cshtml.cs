// <auto-generated />

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using JobPlatform.Common;
using JobPlatform.Data.Models;
using JobPlatform.Services.Data;
using JobPlatform.Services.Mapping;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace JobPlatform.Web.Areas.Identity.Pages.Account.Manage
{
    public class EmployerDataModel : PageModel
    {
        private readonly UserManager<ApplicationUser> userManager;
        private readonly SignInManager<ApplicationUser> signInManager;
        private readonly IEmployerService employerService;

        public EmployerDataModel(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            IEmployerService employerService)
        {
            this.userManager = userManager;
            this.signInManager = signInManager;
            this.employerService = employerService;
        }

        [TempData]
        public string StatusMessage { get; set; }

        [Display(Name = "ЕИК/БУЛСТАТ")]
        public string Eik { get; set; }

        [Display(Name = "Име на компанията")]
        public string EmployerName { get; set; }

        [BindProperty]
        public InputModel Input { get; set; }

        public class InputModel : IMapFrom<Employer>
        {
            [StringLength(50, ErrorMessage = "{0} трябва да е с минимална дължина {2} или максимална {1} ", MinimumLength = 3)]
            [Display(Name = "Град")]
            public string City { get; set; }

            [StringLength(50, ErrorMessage = "{0} трябва да е с минимална дължина {2} или максимална {1} ", MinimumLength = 3)]
            [Display(Name = "Държава")]
            public string Country { get; set; }

            public string Description { get; set; }
        }

        private async Task LoadAsync(ApplicationUser user)
        {
            Employer employer = this.employerService.GetById((int)user.EmployerId);

            Eik = employer.Eik;
            EmployerName = employer.Name;

            Input = new InputModel
            {

                City = employer.City,
                Country = employer.Country,
                Description = employer.Description,
            };
        }

        //TODO: Add Description and Image 
        public async Task<IActionResult> OnGetAsync()
        {
            var user = await this.userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{this.userManager.GetUserId(User)}'.");
            }

            await LoadAsync(user);
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await this.userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{this.userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {
                await LoadAsync(user);
                return Page();
            }
            await this.employerService.EditAsync((int)user.EmployerId, Input.City, Input.Country, Input.Description);

            await this.signInManager.RefreshSignInAsync(user);
            return RedirectToPage();
        }
    }
}
